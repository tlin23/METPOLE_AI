Design Goal:
Implement Google-based authentication, daily question quotas, and admin management for the chatbot backend, with full test coverage and removal of legacy/redundant code.

**Key Features to Implement:**

1. **Google Authentication (backend)**
    - Accept and validate a Google ID token from the frontend in the Authorization header for all API/chat/admin endpoints.
    - Use Googleâ€™s public keys to validate tokens and extract user ID/email.
    - Return 401 Unauthorized for invalid/missing tokens.

2. **User Model & Persistence (SQLite)**
    - Create User table: user_id (Google PK), email, is_admin (bool), question_count (int), last_question_reset (date).
    - Upsert user on every authenticated request.

3. **Session & Message Logging**
    - Create Session table (session_id, user_id, start_time).
    - Create Message table (message_id, session_id, user_id, timestamp, message_type, message_text, retrieved_chunks).
    - Log every question and answer.

4. **Quota Enforcement**
    - 5 questions/day for regular users, 20/day for admins. Enforce daily reset.
    - On each chat question, check/increment question count, log, and include quota_remaining in response.
    - Return 429 if over quota, with helpful error message and quota_remaining.
    - Include quota_remaining in every chat response.

5. **Admin Management**
    - Admin flag in User table.
    - Admin-only API endpoints: `/admin/list`, `/admin/add`, `/admin/remove`, `/admin/reset-quota`.
    - Only admins can access these endpoints.

6. **API Security**
    - All endpoints must validate Google ID tokens.
    - All admin endpoints require admin privileges.

7. **Frontend Contract**
    - Return 401 for unauthenticated, 429 for over-quota.
    - Return quota_remaining in chat API response.
    - Return standard error format for frontend.

8. **Test Coverage**
    - Add comprehensive unit/integration tests (using an in-memory SQLite DB) for:
        - Auth success/failure
        - User creation
        - Quota enforcement for regular and admin users
        - Daily quota reset
        - 429 and 401 API behavior
        - Admin endpoint protection and correctness
        - Logging of questions, answers, and retrieved chunks

9. **Legacy Code Cleanup**
    - Identify and remove all outdated authentication, quota, session, and admin code and tests.
    - Refactor any duplicated logic to use the new implementation.

**Instructions:**
- Add new tables, schemas, and models as needed.
- Use a secure, recommended Google ID token validation library.
- Refactor backend/server/api/routes.py and related files for new auth/quota/admin logic.
- Add/modify tests to backend/data_processing/tests/ (or equivalent) for all new functionality.
- Remove or update any obsolete legacy code and tests.
- Do not change the frontend.
- Follow existing code style and structure.

When implementing, be thorough in tests and careful in code cleanup.
