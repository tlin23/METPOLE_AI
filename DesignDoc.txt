# Design Doc: Authentication & Access Control for Chatbot Backend

## Overview

This design introduces robust Google-authenticated user access, daily question quotas, and admin management to the chatbot backend. Enforcement, state tracking, and logging are **all backend-only**. The frontend will simply reflect backend state.

---

DONE ## 1. User Authentication

- Only authenticated users (Google OAuth) may access chatbot functionality.
- Backend validates Google ID tokens sent by the frontend with every API call.
- Unauthenticated requests get `401 Unauthorized`; frontend displays a splash/sign-in screen.

---

DONE ## 2. Access Tiers & Rate Limits

- **Regular user**: 5 questions/day.
- **Admin user**: 20 questions/day (identified by admin flag in DB).
- Quotas reset daily, tracked and enforced in SQLite.

---

DONE ## 3. Data Model (SQLite)

- **User**:
  - `user_id` (Google), `email`, `is_admin`, `question_count`, `last_question_reset`
- **Session**:
  - `session_id`, `user_id`, `start_time`
- **Message**:
  - `message_id`, `session_id`, `user_id`, `timestamp`, `message_type`, `message_text`, `retrieved_chunks`

*Sessions are ephemeral, no cross-device history.*

---

DONE ## 4. Admin Management

- Admin status (bool in User table).
- Admin-only API endpoints for:
    - Listing admins
    - Promoting/demoting users
    - Resetting any user’s quota

---

## 5. API Behavior

- API checks and logs user, session, message for every request.
- All chat/question endpoints enforce quota and return `quota_remaining`.
- `429 Too Many Requests` for over-quota users, with message and quota status.
- `401 Unauthorized` for missing/invalid auth.
- Admin endpoints accessible only to authenticated admins.

---

## 6. Logging & Auditing

- All messages (questions, answers) logged with metadata for future auditing.

---

## 7. Security

- All ID token validation done securely via Google’s public keys.
- All admin APIs protected by authentication and admin-check logic.
- Only backend enforces authentication/rate-limits.

---

## 8. Test Coverage

- Add **unit and integration tests** for:
    - Google token validation (mocked)
    - User creation and lookup
    - Quota enforcement (normal and admin)
    - Quota reset on day change
    - Over-quota API response (`429`)
    - Auth failure API response (`401`)
    - Admin endpoint access control
    - Admin add/remove actions
    - Message logging

- Tests should use a temporary (in-memory) SQLite DB.

---

## 9. Legacy Code Cleanup

- Identify and remove all old or now-redundant code relating to authentication, quota, session/message logging, or admin management.
- Ensure only one, clean source of truth for auth and quota logic.
- Refactor any legacy tests to cover the new model, or remove if obsolete.
