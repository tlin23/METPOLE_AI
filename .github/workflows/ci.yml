name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing and Linting
  backend-test:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest

    services:
      # SQLite is file-based, so no service needed
      pass:
        image: alpine:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov black flake8 mypy bandit safety

      - name: Set up test environment
        working-directory: ./backend
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          export GOOGLE_CLIENT_ID="test_client_id"
          export GOOGLE_CLIENT_SECRET="test_secret"
          export ADMIN_EMAILS="admin@example.com"
          export OPENAI_API_KEY="test_key"
          export METROPOLE_DB_PATH="/tmp/test.db"

      - name: Lint with flake8
        working-directory: ./backend
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Format check with black
        working-directory: ./backend
        run: |
          black --check --diff .

      - name: Type checking with mypy
        working-directory: ./backend
        run: |
          mypy server/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true  # Type checking is advisory for now

      - name: Security scan with bandit
        working-directory: ./backend
        run: |
          bandit -r server/ -f json -o bandit-report.json || true
          bandit -r server/ --severity-level medium
        continue-on-error: true

      - name: Dependency security check
        working-directory: ./backend
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          GOOGLE_CLIENT_ID: test_client_id
          GOOGLE_CLIENT_SECRET: test_secret
          ADMIN_EMAILS: admin@example.com
          OPENAI_API_KEY: test_key
          METROPOLE_DB_PATH: /tmp/test.db
        run: |
          python -m pytest server/tests/ -v \
            --cov=server \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/htmlcov/
            backend/bandit-report.json
            backend/safety-report.json

  # Frontend Testing and Linting
  frontend-test:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint with ESLint
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: true

      - name: Type checking
        working-directory: ./frontend
        run: npm run type-check
        continue-on-error: true

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        continue-on-error: true

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_OAUTH_CLIENT_ID: ${{ secrets.VITE_OAUTH_CLIENT_ID || 'test_client_id' }}
          VITE_BACKEND_URL: http://localhost:8000
          VITE_FRONTEND_URL: http://localhost:3000
          VITE_OAUTH_REDIRECT_URI: http://localhost:3000/oauth2/callback

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        working-directory: ./backend
        run: |
          docker build -t metpol-backend:test .

      - name: Build frontend Docker image
        working-directory: ./frontend
        run: |
          docker build -t metpol-frontend:test .

      - name: Test docker-compose build
        run: |
          # Create minimal .env for testing
          echo "GOOGLE_CLIENT_ID=test_client_id" > .env
          echo "GOOGLE_CLIENT_SECRET=test_secret" >> .env
          echo "ADMIN_EMAILS=admin@example.com" >> .env
          echo "OPENAI_API_KEY=test_key" >> .env
          echo "METROPOLE_DB_PATH=/data/app.db" >> .env

          # Build all services
          docker-compose build --no-cache

      - name: Test docker-compose services start
        run: |
          # Start services and check they come up
          docker-compose up -d
          sleep 30

          # Check if services are running
          docker-compose ps

          # Basic health checks
          curl -f http://localhost:8080/health || exit 1

          # Cleanup
          docker-compose down -v

  # Security and Load Testing
  security-test:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [backend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security testing tools
        run: |
          pip install pytest requests python-dotenv

      - name: Create security test script
        run: |
          cat > security_test.py << 'EOF'
          import requests
          import pytest
          import time

          BASE_URL = "http://localhost:8000"

          def test_sql_injection_attempts():
              """Test SQL injection protection."""
              payloads = [
                  "'; DROP TABLE users; --",
                  "1' OR '1'='1",
                  "admin'/*",
                  "' UNION SELECT * FROM users --"
              ]

              for payload in payloads:
                  response = requests.post(
                      f"{BASE_URL}/api/ask",
                      json={"question": payload},
                      headers={"Authorization": "Bearer invalid"}
                  )
                  # Should return 401, not 500 (which might indicate SQL injection)
                  assert response.status_code in [401, 422], f"Unexpected response for payload: {payload}"

          def test_rate_limiting():
              """Test rate limiting protection."""
              # This would need actual rate limiting implemented
              pass

          def test_xss_protection():
              """Test XSS payload handling."""
              xss_payloads = [
                  "<script>alert('xss')</script>",
                  "javascript:alert('xss')",
                  "<img src=x onerror=alert('xss')>"
              ]

              for payload in xss_payloads:
                  response = requests.post(
                      f"{BASE_URL}/api/ask",
                      json={"question": payload},
                      headers={"Authorization": "Bearer invalid"}
                  )
                  # Should handle gracefully
                  assert response.status_code in [401, 422]

          if __name__ == "__main__":
              # These are basic security smoke tests
              print("Running basic security tests...")
              test_sql_injection_attempts()
              test_xss_protection()
              print("Security tests completed!")
          EOF

      - name: Run security tests
        run: |
          python security_test.py
        continue-on-error: true

  # Optional Load Testing
  load-test:
    name: Load Tests (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [docker-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install load testing tools
        run: |
          pip install locust

      - name: Create basic load test
        run: |
          cat > locustfile.py << 'EOF'
          from locust import HttpUser, task, between

          class WebsiteUser(HttpUser):
              wait_time = between(1, 3)

              def on_start(self):
                  # This would need proper auth setup
                  pass

              @task(3)
              def health_check(self):
                  self.client.get("/api/health")

              @task(1)
              def ask_question_unauthorized(self):
                  # This should return 401
                  response = self.client.post("/api/ask",
                      json={"question": "test"})
                  assert response.status_code == 401
          EOF

      - name: Run load test
        run: |
          # Run a brief load test - this would need actual service running
          echo "Load test would run here with actual deployment"
        continue-on-error: true

  # Final Status Check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build, security-test]
    if: always()

    steps:
      - name: Check CI Results
        run: |
          echo "Backend Test: ${{ needs.backend-test.result }}"
          echo "Frontend Test: ${{ needs.frontend-test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Security Test: ${{ needs.security-test.result }}"

          if [[ "${{ needs.backend-test.result }}" != "success" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi

          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Docker build failed"
            exit 1
          fi

          echo "✅ All critical CI checks passed!"
